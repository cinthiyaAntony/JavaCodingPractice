
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;

class Main {
    public static void main(String[] args) {
    int arr[] = {1,5,2,8,4,9,6};
    int target = 15;
    int[] result = sumTofindTarget(arr, target);
        System.out.println(Arrays.toString(result));
    
    int[] result1 = twoPointerTech(arr,target);
    System.out.println(Arrays.toString(result1));
    
    int[] result2 = getUsingHashMap(arr,target);
    System.out.println(Arrays.toString(result2));

    }
    //Native approach
    public  static int[] sumTofindTarget(int[] arr, int target){
        
        int len = arr.length;
        
        for(int i=0; i<len; i++){
            for(int j=1; j<len; j++){
                
                if(arr[i] + arr[j] == target){
                    return new int[]{i,j};
                }
                
              }
        }
        return null;
    }
    
    //Two pointer Technique
    public static int[] twoPointerTech(int[] arr, int target){
        //{1,5,2,8,4,9,6}
        int left = 0;
        int right = arr.length -1;
        
        for(int i =0; i<arr.length; i++){
            
            while(left<right){
                if(arr[left]+ arr[right] == target)
                    return new int[]{left,right};
                else if(arr[left]+ arr[right] < target){
                    left ++;
                }
                else
                  right--;
                }
        }
        return null;
    }
    
    
     //HashMap
    
    public static int[] getUsingHashMap(int[] arr,int target){
        
        Map<Integer, Integer> map = new HashMap<>();
        
        for(int i=0; i< arr.length; i++){
            
            int diff = target - arr[i];
            
            if(map.containsKey(diff)){
                return new int[]{map.get(diff),i};
            }
            map.put(arr[i],i);
        }
        return null;
    }
    
    }
